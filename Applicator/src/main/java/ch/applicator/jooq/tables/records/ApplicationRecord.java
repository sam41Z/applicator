/*
 * This file is generated by jOOQ.
 */
package ch.applicator.jooq.tables.records;


import ch.applicator.jooq.enums.Status;
import ch.applicator.jooq.tables.Application;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ApplicationRecord extends UpdatableRecordImpl<ApplicationRecord> implements Record4<UUID, UUID, String, Status> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.application.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.application.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.application.job</code>.
     */
    public void setJob(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.application.job</code>.
     */
    public UUID getJob() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.application.cover_letter</code>.
     */
    public void setCoverLetter(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.application.cover_letter</code>.
     */
    public String getCoverLetter() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.application.status</code>.
     */
    public void setStatus(Status value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.application.status</code>.
     */
    public Status getStatus() {
        return (Status) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, UUID, String, Status> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UUID, UUID, String, Status> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Application.APPLICATION.ID;
    }

    @Override
    public Field<UUID> field2() {
        return Application.APPLICATION.JOB;
    }

    @Override
    public Field<String> field3() {
        return Application.APPLICATION.COVER_LETTER;
    }

    @Override
    public Field<Status> field4() {
        return Application.APPLICATION.STATUS;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getJob();
    }

    @Override
    public String component3() {
        return getCoverLetter();
    }

    @Override
    public Status component4() {
        return getStatus();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getJob();
    }

    @Override
    public String value3() {
        return getCoverLetter();
    }

    @Override
    public Status value4() {
        return getStatus();
    }

    @Override
    public ApplicationRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public ApplicationRecord value2(UUID value) {
        setJob(value);
        return this;
    }

    @Override
    public ApplicationRecord value3(String value) {
        setCoverLetter(value);
        return this;
    }

    @Override
    public ApplicationRecord value4(Status value) {
        setStatus(value);
        return this;
    }

    @Override
    public ApplicationRecord values(UUID value1, UUID value2, String value3, Status value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ApplicationRecord
     */
    public ApplicationRecord() {
        super(Application.APPLICATION);
    }

    /**
     * Create a detached, initialised ApplicationRecord
     */
    public ApplicationRecord(UUID id, UUID job, String coverLetter, Status status) {
        super(Application.APPLICATION);

        setId(id);
        setJob(job);
        setCoverLetter(coverLetter);
        setStatus(status);
        resetChangedOnNotNull();
    }
}
